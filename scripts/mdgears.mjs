import { writeFileSync } from 'fs';
import { formatAsHtml, L, loadJson, formatRewardList } from './utils.mjs';

function generateGearsMarkdown() {
	const gear = loadJson('GSGear');
	const gearLevel = loadJson('GSGearLevel');
    const characters = loadJson('GSCharacter');

	let content = `---
title: 'Gears'
date: '${new Date().toISOString()}'
author: 'AutoGenerated'
---

**TODO** Check the mat on the stat increase values below
`;

	Object.values(gear).forEach((entry) => {
		content += `\n### ${L(entry.m_NameLocKey)} (Role: ${L("Common_CharacterRole_" + entry.m_Role)}, Slot: ${entry.m_Slot})
<img src="/assets/${entry.m_Icon}.png" alt="${L(entry.m_NameLocKey)}" height="128" >

${formatAsHtml(L(entry.m_DescLocKey))}\n`;

        if (entry.m_CharID) {
            content += `\nGear is unique for ${L(characters[entry.m_CharID].Name)}\n`;
        }
        if (entry.m_TriviaLocKey) {
            content += `\n${formatAsHtml(L(entry.m_TriviaLocKey))}\n`;
        }

        let levels = Object.values(gearLevel).filter(gl => gl.m_GearID == entry.id);

        content += `
Level | Rarity | ${entry.m_Stats.map((stat) => L('Common_AccessoryStat_' + ((stat.m_Type == 'Defense' ) ? 'Defence' : stat.m_Type)).padEnd(10)).join(' | ')} | Upgrade cost
----- | ------ | ${entry.m_Stats.map((r) => '-'.padEnd(10, '-')).join(' | ')} | ------------
`;
        for (let level of levels) {
            content += `${level.m_Level} | ${L('Common_Rarity_' + level.m_Rarity)}`;
            for (let i = 1; i <= level.m_StatBrancheCount; i++) {
                // TODO: validate this math!
                content += ' | '
                content += Math.floor(entry.m_Stats[i - 1].m_IncreaseValue * level.m_Level * 100) / 100;
            }
            for (let i = level.m_StatBrancheCount; i < entry.m_Stats.length; i++) {
                content += ' | --';
            }

            content += ` | ${formatRewardList(level.m_UpgradePrice.AllItems)}\n`;
        }
	});

	writeFileSync(new URL(`../_wiki/gears.md`, import.meta.url), content);
}

export { generateGearsMarkdown };
