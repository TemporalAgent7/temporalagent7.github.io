import { writeFileSync } from 'fs';
import { formatAsHtml, L, loadJson, formatRewardList } from './utils.mjs';

function generateParticlesMarkdown() {
	const rarity = Object.keys(loadJson('GSRarity'));
	const particles = loadJson('GSAccessoryItems');
	const particlesUpgrading = loadJson('GSAccessoryUpgrading');
	const particlesStatGrowth = loadJson('GSAccessoryStatGrowth');
	const stats = Object.keys(loadJson('GSAccessoryStatGeneration'));

	let content = `---
title: 'Particles'
date: '${new Date().toISOString()}'
author: 'AutoGenerated'
---

`;

	Object.values(particles).forEach((entry) => {
		content += `\n### ${L(entry.Name)} - ${L('Common_Rarity_' + entry.Rarity)}
<img src="/assets/${entry.Icon}.png" alt="${L(entry.Name)}" height="128" >

${formatAsHtml(L(entry.Description))}

First stat: ${entry.FirstStat}\n`;
	});

	content += `\n## Upgrading particles

Level / Rarity | ${rarity.map((r) => L('Common_Rarity_' + r).padEnd(10)).join(' | ')}
-------------- | ${rarity.map((r) => '-'.padEnd(10, '-')).join(' | ')}
`;

	for (let level = 1; level <= 5; level++) {
		let upgLine = `Upgrade to ${level}`;
		let sellLine = `Sell at ${level}`;

		for (let r of rarity) {
			let upgradeEntry = Object.values(particlesUpgrading).find((pu) => pu.id.level == level && pu.id.rarity == r);

			upgLine += `| ${formatRewardList(upgradeEntry.PriceUpgrade.AllItems)}`;
			sellLine += `| ${formatRewardList(upgradeEntry.RewardSell.AllItems)}`;
		}

		content += `${upgLine}\n${sellLine}\n`;
	}

	content += `\n## Stat boosts for particles

Level - Stat / Rarity | ${rarity.map((r) => L('Common_Rarity_' + r).padEnd(10)).join(' | ')}
--------------------- | ${rarity.map((r) => '-'.padEnd(10, '-')).join(' | ')}\n`;

	for (let level = 1; level <= 5; level++) {
		for (let stat of stats) {
			content += `${level} - ${L('Common_AccessoryStat_' + ((stat == 'Defense' ) ? 'Defence' : stat))} `;

			for (let r of rarity) {
				let statGrowthEntry = Object.values(particlesStatGrowth).find(
					(pu) => pu.id.level == level && pu.id.rarity == r && pu.id.stat == stat
				);

				content += `| ${statGrowthEntry.StatIncrease} `;
			}

			content += `\n`;
		}
	}

	writeFileSync(new URL(`../_wiki/particles.md`, import.meta.url), content);
}

export { generateParticlesMarkdown };
